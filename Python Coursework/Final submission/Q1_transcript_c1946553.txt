Question 1a
>>> import random
... def pars_win(score_a,score_b):
...     return ((score_a >= 11 or score_b >= 11) and abs(score_a-score_b) >= 2)
... 
... def game(ra,rb):
...     prob_a = ra/(ra+rb)
...     score_a = 0
...     score_b = 0
...     while not pars_win(score_a,score_b):
...         point = random.random()
...         if point < prob_a:
...             score_a+=1
...         else:
...             score_b+=1
...     
...     return (score_a,score_b)
... 
>>> random.seed(57)
>>> game(70,30)
(11, 5)

Question 1b
>>> def winProbability(ra,rb,n):
...     prob_a = 0
...     for i in range(0,n):
...         result = game(ra,rb)
...         if result.index(max(result)) == 0:
...             prob_a+=1
...     return prob_a/n
... 
>>> print(winProbability(70,30,500))
0.978

Question 1c
>>> import csv
>>> def get_abilities(filename):
...     abilities_file = csv.reader(open(filename,'r'))
...     abilities = []
...     for line in abilities_file:
...         if abilities_file.line_num != 1:
...             abilities.append((int(line[0]),int(line[1])))
...     return abilities
... 
>>> print(get_abilities('test.csv'))
[(60, 20), (100, 55), (50, 40), (20, 70), (95, 85)]

Question 1d
>>> import matplotlib.pyplot as plt
>>> def plot_probabilities(abilities,trials):
...     probabilities = []
...     ratings = []
...     for pair in abilities:
...         probabilities.append(winProbability(pair[0],pair[1],trials))
...         ratings.append(pair[0]/pair[1])
...     plt.plot(ratings,probabilities,'o--g')
...     plt.xlabel('Rating of A/Rating of B')
...     plt.ylabel('Probability that player A beats player B')
...     plt.suptitle('Probability that player a beats player b')
...     plt.show()
... 
>>> plot_probabilities(get_abilities('test.csv'),500)

Question 1e
>>> def probability_first_to_n(n,probability):
...     iterations = list(itertools.permutations(n*'w'+n*'l',n*2))
...     no_repeats = []
...     for iteration in iterations:
...         if iteration not in no_repeats and list(iteration).count('w') == n:
...             no_repeats.append(iteration)
...     no_losses = []
...     for iteration in no_repeats:
...         wins = 0
...         losses = 0
...         for result in iteration:
...             if result == 'l':
...                 losses+=1
...             else:
...                 wins+=1
...             if wins == n and losses < n:
...                 no_losses.append(iteration)
...                 break
...     clipped = []
...     for iteration in no_losses:
...         wins = 0
...         for i in range(0,len(iteration)):
...             if wins == n:
...                 clipped.append(iteration[0:i])
...                 break
...             if iteration[i] == 'w':
...                 wins+=1
...     probabilities = []
...     for iteration in clipped:
...         probabilities.append((probability**iteration.count('w'))*(1-probability)**iteration.count('l'))
...     return sum(probabilities)
... 
>>> def minimum_games(rating_a,rating_b):
...     games = 1
...     probability = winProbability(rating_a,rating_b,5000)
...     while probability_first_to_n(games,probability) < 0.9:
...         games+=1
...     return games
... 
>>> minimum_games(60,40)
2
